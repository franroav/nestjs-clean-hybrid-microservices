# Development Stage
FROM node:18-alpine AS development

# Install curl and any build dependencies
RUN apk --no-cache add curl

# Set working directory
WORKDIR /usr/src/app

# Copy package.json and package-lock.json first to leverage Docker cache
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy the rest of the app code
COPY . .

# Build the app (client-service in this case)
RUN npm run build client-service

# Production Stage
FROM node:18-alpine AS production

# Install curl
RUN apk --no-cache add curl

# Set the environment to production
ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}

# Set working directory
WORKDIR /usr/src/app

# Copy only the package.json and package-lock.json files first for installing production dependencies
COPY package*.json ./

# Install only production dependencies
RUN npm install --only=production

# Copy the built application from the development stage
COPY --from=development /usr/src/app/dist ./dist

# Set the command to run the app
CMD ["node", "dist/apps/client-service/main"]


# FROM node:20-alpine3.18 AS base

# ENV DIR /app
# WORKDIR $DIR
# ARG NPM_TOKEN

# FROM base AS dev

# ENV NODE_ENV=development

# COPY package*.json .

# RUN echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ".npmrc" && \
#     npm ci && \
#     rm -f .npmrc

# COPY tsconfig*.json .
# COPY .swcrc .
# COPY nest-cli.json .
# COPY src src

# EXPOSE $PORT
# CMD ["npm", "run", "dev"]

# FROM base AS build

# RUN apk update && apk add --no-cache dumb-init=1.2.5-r2

# COPY package*.json .
# RUN echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ".npmrc" && \
#     npm ci && \
#     rm -f .npmrc

# COPY tsconfig*.json .
# COPY .swcrc .
# COPY nest-cli.json .
# COPY src src

# RUN npm run build && \
#     npm prune --production

# FROM base AS production

# ENV NODE_ENV=production
# ENV USER=node

# COPY --from=build /usr/bin/dumb-init /usr/bin/dumb-init
# COPY --from=build $DIR/package*.json .
# COPY --from=build $DIR/node_modules node_modules
# COPY --from=build $DIR/dist dist

# USER $USER
# EXPOSE $PORT
# CMD ["dumb-init", "node", "dist/main.js"]
