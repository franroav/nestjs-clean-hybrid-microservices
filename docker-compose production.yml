version: '3.8'

services:
  # Nats for messaging
  redis:
    container_name: redis
    image: redis:7.0.8
    ports:
      - "6379:6379"
    networks:
      - default
  nats:
    image: nats
    container_name: nats-server
    ports:
      - "4222:4222"
    networks:
      - default

  #   # Zookeeper for Kafka
  # zookeeper:
  #   image: zookeeper:3.7
  #   container_name: zookeeper
  #   ports:
  #     - "2181:2181"
  #   networks:
  #     - default
  #     # - kafka-network

  # kafka:
  #   image: confluentinc/cp-kafka:latest
  #   container_name: kafka
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
  #     KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
  #     KAFKA_LISTENER_NAME: OUTSIDE
  #     KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE # Add this line to specify the inter-broker listener
  #   networks:
  #     - default
  #     # - kafka-network
  # Kafka Connect for integrations
   # Kafka broker
  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - default
  kafka:
    image: confluentinc/cp-kafka:7.4.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - default

  # Confluent Schema Registry
  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.1
    container_name: schema-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - default
  kafka-connect:
    image: confluentinc/cp-kafka-connect:7.4.1
    container_name: kafka-connect
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: "connect-cluster"
      CONNECT_CONFIG_STORAGE_TOPIC: "connect-configs"
      CONNECT_OFFSET_STORAGE_TOPIC: "connect-offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "connect-status"
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: false
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: false
      CONNECT_PLUGIN_PATH: "/usr/share/java"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
    networks:
      - default

  # Confluent Control Center
  control-center:
    image: confluentinc/cp-enterprise-control-center:7.4.1
    container_name: control-center
    depends_on:
      - kafka
      - schema-registry
      - kafka-connect
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: kafka:9092
      CONTROL_CENTER_CONNECT_CLUSTER: kafka-connect:8083
      CONTROL_CENTER_KSQL_KSQLDB_URL: "http://ksql-server:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONTROL_CENTER_REPLICATION_FACTOR: 1
    networks:
      - default

  # KSQL Server for stream processing
  ksql-server:
    image: confluentinc/cp-ksqldb-server:7.4.1
    container_name: ksql-server
    depends_on:
      - kafka
    ports:
      - "8088:8088"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksqldb"
      KSQL_BOOTSTRAP_SERVERS: kafka:9092
      KSQL_LISTENERS: http://0.0.0.0:8088
    networks:
      - default
  # Consul service for service discovery
  consul:
    image: consul:1.14.3
    container_name: consul
    ports:
      - '8500:8500'
    command: agent -dev -client=0.0.0.0 -ui
    networks:
      - default
    environment:
      - CONSUL_BIND_INTERFACE=eth0

  # User Service
  user-service:
    build:
      context: .
      dockerfile: apps/user-service/dockerfile
    ports:
      - '3001:3001'
    environment:
      - NODE_ENV=development
      - JWT_SECRET=your_jwt_secret_key
      - DB_STORAGE_PATH=/usr/src/app/libs/infrastructure/src/databases/sequelize/.db/data.sqlite3
      - CONSUL_HOST=consul  # Consul service discovery host
      - CONSUL_PORT=8500
      - SERVICE_NAME=user-service
      - SERVICE_ID=user-service-1
      - SERVICE_PORT=3001
    volumes:
      - .:/usr/src/app
      - ./libs/infrastructure/src/databases/sequelize/.db:/usr/src/app/libs/infrastructure/src/databases/sequelize/.db  # Map SQLite volume to the user-service
    command: >
      sh -c "
        # Register the service with Consul
        curl -X PUT -d '
        {
          \"ID\": \"${SERVICE_ID}\",
          \"Name\": \"${SERVICE_NAME}\",
          \"Address\": \"user-service\",
          \"Port\": ${SERVICE_PORT},
          \"Tags\": [\"nodejs\"]
        }' http://consul:8500/v1/agent/service/register &&
        npm run start:dev
      "
    depends_on:
      - consul
      - email-service
      - sqlite3
    networks:
      - default

  # Email Service
  email-service:
    build:
      context: .
      dockerfile: apps/email-service/dockerfile
    ports:
      - '3003:3003'
    environment:
      - NODE_ENV=development
      - JWT_SECRET=your_jwt_secret_key
      - CONSUL_HOST=consul  # Consul service discovery host
      - CONSUL_PORT=8500
      - SERVICE_NAME=email-service
      - SERVICE_ID=email-service-1
      - SERVICE_PORT=3003
    volumes:
      - .:/usr/src/app
    command: >
      sh -c "
        # Register the service with Consul
        curl -X PUT -d '
        {
          \"ID\": \"${SERVICE_ID}\",
          \"Name\": \"${SERVICE_NAME}\",
          \"Address\": \"email-service\",
          \"Port\": ${SERVICE_PORT},
          \"Tags\": [\"nodejs\"]
        }' http://consul:8500/v1/agent/service/register &&
        npm run start:dev
      "
    depends_on:
      - consul
      - nats
    networks:
      - default
    # Cache service
  cache-service:
    build:
      context: .
      dockerfile: apps/cache-service/dockerfile
    ports:
      - '3002:3002'  # Avoid port conflict with Redis
    environment:
      - NODE_ENV=development
      - JWT_SECRET=your_jwt_secret_key
      - CONSUL_HOST=consul  # Consul service discovery host
      - CONSUL_PORT=8500
      - SERVICE_NAME=cache-service
      - SERVICE_ID=cache-service-1
      - SERVICE_PORT=3002
    volumes:
      - .:/usr/src/app
    command: >
      sh -c "
        # Register the service with Consul
        curl -X PUT -d '
        {
          \"ID\": \"${SERVICE_ID}\",
          \"Name\": \"${SERVICE_NAME}\",
          \"Address\": \"cache-service\",
          \"Port\": ${SERVICE_PORT},
          \"Tags\": [\"nodejs\"]
        }' http://consul:8500/v1/agent/service/register &&
        npm run start:dev
      "
    depends_on:
      - consul
      - redis
    networks:
      - default
  # SQLite3 database container
  sqlite3:
    image: nouchka/sqlite3:latest
    container_name: sqlite3
    volumes:
      - ./libs/infrastructure/src/databases/sequelize/.db:/usr/src/app/libs/infrastructure/src/databases/sequelize/.db  # Ensure SQLite data is accessible and persists
    networks:
      - default
    ports:
      - "8080:8080" # Optional: expose a port if necessary for debugging
    stdin_open: true # Keep stdin open to allow for interactive mode
    tty: true        # Allocate a pseudo-TTY

networks:
  default:
    driver: bridge
  kafka-network:
    driver: bridge




# networks:
#   kafka-network:
#     driver: bridge
#   default:
#     driver: bridge

# volumes:
#   mongo_data:
#     driver: local
#   postgres_data_users:
#     driver: local
#   postgres_data_billing:
#     driver: local



# version: '3.8'

# services:
  # nats:
  #   image: nats
  #   container_name: nats-server
  #   ports:
  #     - "4222:4222"
  #   networks:
  #     - default

  #   # Zookeeper for Kafka
  # zookeeper:
  #   image: zookeeper:3.7
  #   container_name: zookeeper
  #   ports:
  #     - "2181:2181"
  #   networks:
  #     - kafka-network

  # kafka:
  #   image: confluentinc/cp-kafka:latest
  #   container_name: kafka
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
  #     KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
  #     KAFKA_LISTENER_NAME: OUTSIDE
  #     KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE # Add this line to specify the inter-broker listener
  #   networks:
  #     - kafka-network

  # MongoDB for billing service
  # mongo:
  #   image: mongo:6.0
  #   container_name: billing-mongo-db
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: root
  #     MONGO_INITDB_ROOT_PASSWORD: password
  #     MONGO_INITDB_DATABASE: billing
  #   volumes:
  #     - mongo_data:/data/db
  #   ports:
  #     - "27017:27017"
  #   restart: always
  #   networks:
  #     - default

  # # PostgreSQL for user service
  # postgres-users:
  #   image: bitnami/postgresql:15
  #   container_name: postgres-db-users
  #   environment:
  #     POSTGRES_USER: user
  #     POSTGRES_PASSWORD: password
  #     POSTGRES_DB: users
  #   volumes:
  #     - postgres_data_users:/bitnami/postgresql
  #   ports:
  #     - "5432:5432"
  #   restart: always
  #   networks:
  #     - default

  # # PostgreSQL for billing service
  # postgres-billing:
  #   image: bitnami/postgresql:15
  #   container_name: postgres-db-billing
  #   environment:
  #     POSTGRES_USER: user
  #     POSTGRES_PASSWORD: password
  #     POSTGRES_DB: billing
  #   volumes:
  #     - postgres_data_billing:/bitnami/postgresql
  #   ports:
  #     - "5433:5432" # Different port to avoid conflict with the first PostgreSQL service
  #   restart: always
  #   networks:
  #     - default

  # Consul service for service discovery
  # consul:
  #   image: consul:1.14.3  # Specify a known version of Consul
  #   container_name: consul
  #   ports:
  #     - '8500:8500'
  #   command: agent -dev -client=0.0.0.0
  #   networks:
  #     - default

  # # User service
  # user-service:
  #   build:
  #     context: .
  #     dockerfile: apps/user-service/dockerfile
  #   ports:
  #     - '3001:3001'
  #   environment:
  #     - CONSUL_HOST=consul
  #     - CONSUL_PORT=8500
  #   networks:
  #     - default

  # # EMail service
  # email-service:
  #   build:
  #     context: .
  #     dockerfile: apps/email-service/dockerfile
  #   ports:
  #     - '3003:3003'
  #   environment:
  #     - CONSUL_HOST=consul
  #     - CONSUL_PORT=8500
  #   networks:
  #     - default
    # depends_on:
    #   - nats

  # # Billing service
  # billing-service:
  #   build:
  #     context: .
  #     dockerfile: apps/billing-service/dockerfile
  #   ports:
  #     - '9092:9092'
  #   environment:
  #     - CONSUL_HOST=consul
  #     - CONSUL_PORT=8500
  #   networks:
  #     - default
  #   depends_on:
  #     - kafka
  #     - mongo
  #     - postgres-billing


# networks:
#   kafka-network:
#     driver: bridge
#   default:
#     driver: bridge

# volumes:
#   mongo_data:
#     driver: local
#   postgres_data_users:
#     driver: local
#   postgres_data_billing:
#     driver: local
